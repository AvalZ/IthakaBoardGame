<html>
<head>
</head>

<body>
<h1>
Програмиране на Android – практическо ръководство
</h1>

<h3>
инж. Тодор Балабанов
</h3>

<h2>
Институт по информационни и комуникационни технологии
</h2>

<h2>
Българската академия на науките
</h2>

<h2>
София - 2016
</h2>

<hr/>
<h1>
Съдържание
</h1>

<hr/>
<h1>
1. Въведение
</h1>

През първото десетилетие на 21 век, в ежедневния бит на хората масово навлезе използването на мобилни изчислителни устройства, основно под формата на умни телефони и таблети. Наличието на глобални свободни пазари се оказа ключов фактор за развитието на интензивна конкурентна среда. Първите масово разпространени „умни“ устройства бяха предложени от компанията Apple, с операционна система iOS и програмен език Objective-C. В кратки срокове след това бе предложена отворена платформа за развитие на мобилни устройства – Android, за развитието на която основна роля изигра компанията Google, залагайки като програмен език Java. Компанията Microsoft също предложи свое решение, базирано на операционната система Windows Phone, с основен програмен език C#. Трите водещи производителя се различават основно в степента на отвореност, който предлагат за своите системи. В случая на Apple платформата е напълно затворена. В случая на Android стремежът е платформата да бъде напълно отворена. Докато Microsoft заемат относително междинна позиция.

<p/>

В настоящото практическо ръководство ще бъде представен процесът за създаване на програмни продукти за платформата Android. Изборът на тази платформа е основан на идеята за свободен достъп до технологии, а също така и на факта, че производствените разходи за платформата Android са най-ниски. Практическото ръководство е предназначено за читатели със средно или напреднало ниво в областта на програмирането и софтуерното инженерство. Ръководството не е подходящо за читатели, които тепърва навлизат в областта на компютърните науки. 

<p/>

Поради своя практически характер, настоящото ръководство излага минимални теоретични знания и акцентира върху практическите стъпки за създаване и поддръжка на софтуер. Обект на разработката представлява логическа игра, която се играе на дъска. Софтуерният проект е под GPL3 отворен лиценз и може да се достъпи свободно в публичното пространство. 

<hr/>
<h1>
2. Логическата игра за дъска Ithaka
</h1>

Логическата игра Ithaka е публикувана официално през 2002 година от L. Lynn Smith. 

<p/>

<img src="0001.png" height="50%" width="50%"/><br/>
<b>Фиг. 1</b> Официална страница на логическата игра Ithaka в уеб сайта BoardGameGeek.

<p/>

Играта се играе от двама играчи, на дъска, която е оформена в 4х4 клетки. Върху дъската за разположени пулове в четири различни цвята. Целта на играчите, за да победят, е да формират линия от три едноцветни пула (вертикално, хоризонтално или диагонално).

<p/>

<img src=".png" height="50%" width="50%"/><br/>
<b>Фиг. 2</b> Начална конфигурация на игралното табло.

<p/>

Всеки от играчите може да мести пулове от четирите различни цвята. На всеки ход играчът мести само един пул, по права линия (хоризонтално, вертикално и диагонално) през произволен брой празни клетки. Първото ограничение, при местене на пул е, че не може да се мести последно преместеният пул. Второто ограничение е, че може да се местят само пулове, които имат в съседство пул от същия цвят. Основното условие за победа е да бъде формирана права линия от три пула, от един и същи цвят. Играчът побеждава опонента си и ако постигне конфигурация в която опонентът няма позволен за местене ход. Третото условие за победа е, ако противникът извърши един и същи ход три последователни пъти. 

<p/>

Играта Ithaka има достатъчно опростени правила и поради тази причина е много добър кандидат за реализиране под формата на приложение за мобилни устройства. Пространството на състоянията, в тази игра, е 16 и тя попада е със сложност сходна на популярната игра Connect Four. При логическите игри с развлекателен характер от съществено значение е сложността за създаването на компютърно управляван опонент (изкуствен интелект). За игри с относително малко пространство на състоянията (както е играта Tic-Tac-Тое) дори алгоритми с пълно изчерпване дават достатъчно добри резултати в приемливо време за изчисление. 

<hr/>
<h1>
3. Управление на проект с отворен код
</h1>

Управлението на софтуерни проекти се осъществява със софтуерни системи, създадени специално за тази цел. За нуждите на настоящото изложение разработваният софтуерен проект е с GPL3 лиценз, за софтуер с отворен код. Една от най-подходящите алтернативи да се управлява такъв проект е хранилището GitHub. GitHub представлява облачна услуга, която позволява да се публикуват софтуерни проекти. GitHub включва различни системи, които позволяват работата на програмисти в екип, като системата за проследяване на дефекти и системата за контрол на версиите (базирана на софтуерния инструмент Git). 

<p/>

Създаването на един софтуерен продукт започва с заделяне на хранилище в което ще се разполага програмния код.

<p/>

<img src="0004.png" height="50%" width="50%"/><br/>
<b>Фиг. 3</b> Създаване на хранилище в GitHub.

<p/>

При първоначалното конфигуриране на отдалеченото хранилище в GitHub се избира име на проекта, определя се съдържанието на .gitignore файла (в конкретния случай Android конфигурация) и се избира подходящ лиценз (в конкретния случай GPL3).

<p/>

<img src="0005.png" height="50%" width="50%"/><br/>
<b>Фиг. 4</b> Състояние на новосъздаденото хранилище в GitHub.

<p/>

При използването на езика за програмиране Java са възможни различни развойни инструменти. Един от най-популярните и най-широко използвани е Eclipse. Eclipse представлява интегрирана среда за разработка (IDE), която основно включва текстов редактор и механизъм за извикване на развойните инструменти, предоставени от компанията Oracle. За нуждите на Android програмирането, Eclipse поддържа допълнителна приставка наречена Android Developer Tools – Plugin. За разработка на Android приложения, Eclipse се използва в комбинация с Android Software Development Kit, който включва и емулатор на различни виртуални устройства. 

<p/>

<img src="0007.png" height="50%" width="50%"/><br/>
<b>Фиг. 5</b> Начален работен екран в Eclipse.

<p/>

Eclipse е развойна среда, която организира работата на проектен принцип. За тази цел всяка разработка се оформя като Eclipse Project.

<p/>

<img src="0008.png" height="50%" width="50%"/><br/>
<b>Фиг. 6</b> Създаване на нов Eclipse проект.

<p/>

Развойната среда позволява работата с множество различни проекти, но в случая на Android разработка най-удачният вариант е генерирането на Android Application Project. 

<p/>

<img src="0009.png" height="50%" width="50%"/><br/>
<b>Фиг. 7</b> Основни параметри на новосъздадения Eclipse проект.

<p/>

В работното пространство на Eclipse всеки проект има уникално наименование. Също така, всеки проект представлява софтуерен продукт и поради тази причина се въвежда наименование на продукта. В езика Java софтуерът се организира под формата на пакети и поради тази причина е необходимо избирането на подходящо название за пакет. Названието на пакета трябва да е уникално и да не води до колизия с наименованията на други пакети, дори когато става въпрос за софтуери с глобален мащаб на разпространение. Названието на пакета има и друга ключова отговорност, а именно уникалност при публикуването на готовия продукт в Google Play Store. Точно на тази фаза от разработката се определят и Android версиите, които ще бъдат поддържани.

<p/>

<img src="0013.png" height="50%" width="50%"/><br/>
<b>Фиг. 8</b> Структура на новосъздадено проект в Eclipse.

<p/>

Като икона за предложението се запазват подразбиращите се характеристики и в етапа за създаване на проект не се добавя първоначален прозорец (Activity).

<p/>

За да бъде добавен новосъздадения Eclipse проект в отдалеченото хранилище на GitHub е необходимо клониране на отдалеченото хранилище в директория на локалния компютър.

<p/>

<img src="0015.png" height="50%" width="50%"/><br/>
<b>Фиг. 9</b> Команда за клониране от отдалеченото хранилище на GitHub.

<p/>

В резултат от командата за клониране на работният плот се появява папка с локално копие на GitHub хранилището. 

<p/>

<img src="0016.png" height="50%" width="50%"/><br/>
<b>Фиг. 10</b> Резултат от командата за клониране.

<p/>

Файловете от двете папки (папката създадена от Eclipse и папката получена в следствие на процеса за клониране) се обединяват в една обща папка.

<p/>

<img src="0018.png" height="50%" width="50%"/><br/>
<b>Фиг. 11</b> Обединяване на файловете за проекта.

<p/>

След обединяването на двете папки не е нужно повече да се използват командните инструменти на Git, а може да се използват вградените Git инструменти в средата Eclipse. 

<p/>

<img src="0021.png" height="50%" width="50%"/><br/>
<b>Фиг. 12</b> Публикуване на промените в локалното Git хранилище.

<p/>

Git е система за контрол на версиите, която работи на две степени (локално и глобално хранилище). Локалното хранилище се ползва при липса на връзка към Глобалната мрежа, докато публикуването в глобалното хранилище прави файловете публично достъпни в Глобалната мрежа.

<p/>

<img src="0022.png" height="50%" width="50%"/><br/>
<b>Фиг. 13</b> Публикуване на промените в глобалното Git хранилище.

<p/>

Започването на нов проект с отворен код приключва с публикуването на първоначалната версия в публичното пространство.

<p/>

<img src="0023.png" height="50%" width="50%"/><br/>
<b>Фиг. 14</b> Първоначален изглед на новосъздадения Eclipse проект в GitHub.

<hr/>
<h1>
4. Генериране на печалба от проекти с отворен код
</h1>

</body>
</html>

