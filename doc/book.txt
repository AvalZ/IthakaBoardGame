<html>
<head>
</head>

<body>
<h1>
Програмиране на Android – практическо ръководство
</h1>

<h3>
инж. Тодор Балабанов
</h3>

<h2>
Институт по информационни и комуникационни технологии
</h2>

<h2>
Българската академия на науките
</h2>

<h2>
София - 2016
</h2>

<hr/>
<h1>
Съдържание
</h1>

<hr/>
<h1>
1. Въведение
</h1>

През първото десетилетие на 21 век, в ежедневния бит на хората масово навлезе използването на мобилни изчислителни устройства, основно под формата на умни телефони и таблети. Наличието на глобални свободни пазари се оказа ключов фактор за развитието на интензивна конкурентна среда. Първите масово разпространени „умни“ устройства бяха предложени от компанията Apple, с операционна система iOS и програмен език Objective-C. В кратки срокове след това бе предложена отворена платформа за развитие на мобилни устройства – Android, за развитието на която основна роля изигра компанията Google, залагайки като програмен език Java. Компанията Microsoft също предложи свое решение, базирано на операционната система Windows Phone, с основен програмен език C#. Трите водещи производителя се различават основно в степента на отвореност, който предлагат за своите системи. В случая на Apple платформата е напълно затворена. В случая на Android стремежът е платформата да бъде напълно отворена. Докато Microsoft заемат относително междинна позиция.

<p/>

В настоящото практическо ръководство ще бъде представен процесът за създаване на програмни продукти за платформата Android. Изборът на тази платформа е основан на идеята за свободен достъп до технологии, а също така и на факта, че производствените разходи за платформата Android са най-ниски. Практическото ръководство е предназначено за читатели със средно или напреднало ниво в областта на програмирането и софтуерното инженерство. Ръководството не е подходящо за читатели, които тепърва навлизат в областта на компютърните науки. 

<p/>

Поради своя практически характер, настоящото ръководство излага минимални теоретични знания и акцентира върху практическите стъпки за създаване и поддръжка на софтуер. Обект на разработката представлява логическа игра, която се играе на дъска. Софтуерният проект е под GPL3 отворен лиценз и може да се достъпи свободно в публичното пространство. 

<hr/>
<h1>
2. Логическата игра за дъска Ithaka
</h1>

Логическата игра Ithaka е публикувана официално през 2002 година от L. Lynn Smith. 

<p/>

<img src="0001.png" height="50%" width="50%"/><br/>
<b>Фиг. 1</b> Официална страница на логическата игра Ithaka в уеб сайта BoardGameGeek.

<p/>

Играта се играе от двама играчи, на дъска, която е оформена в 4х4 клетки. Върху дъската за разположени пулове в четири различни цвята. Целта на играчите, за да победят, е да формират линия от три едноцветни пула (вертикално, хоризонтално или диагонално).

<p/>

<img src="0226.png" height="50%" width="50%"/><br/>
<b>Фиг. 2</b> Начална конфигурация на игралното табло.

<p/>

Всеки от играчите може да мести пулове от четирите различни цвята. На всеки ход играчът мести само един пул, по права линия (хоризонтално, вертикално и диагонално) през произволен брой празни клетки. Първото ограничение, при местене на пул е, че не може да се мести последно преместеният пул. Второто ограничение е, че може да се местят само пулове, които имат в съседство пул от същия цвят. Основното условие за победа е да бъде формирана права линия от три пула, от един и същи цвят. Играчът побеждава опонента си и ако постигне конфигурация в която опонентът няма позволен за местене ход. Третото условие за победа е, ако противникът извърши един и същи ход три последователни пъти. 

<p/>

Играта Ithaka има достатъчно опростени правила и поради тази причина е много добър кандидат за реализиране под формата на приложение за мобилни устройства. Пространството на състоянията, в тази игра, е 16 и тя попада е със сложност сходна на популярната игра Connect Four. При логическите игри с развлекателен характер от съществено значение е сложността за създаването на компютърно управляван опонент (изкуствен интелект). За игри с относително малко пространство на състоянията (както е играта Tic-Tac-Тое) дори алгоритми с пълно изчерпване дават достатъчно добри резултати в приемливо време за изчисление. 

<hr/>
<h1>
3. Управление на проект с отворен код
</h1>

Управлението на софтуерни проекти се осъществява със софтуерни системи, създадени специално за тази цел. За нуждите на настоящото изложение разработваният софтуерен проект е с GPL3 лиценз, за софтуер с отворен код. Една от най-подходящите алтернативи да се управлява такъв проект е хранилището GitHub. GitHub представлява облачна услуга, която позволява да се публикуват софтуерни проекти. GitHub включва различни системи, които позволяват работата на програмисти в екип, като системата за проследяване на дефекти и системата за контрол на версиите (базирана на софтуерния инструмент Git). 

<p/>

Създаването на един софтуерен продукт започва с заделяне на хранилище в което ще се разполага програмния код.

<p/>

<img src="0004.png" height="50%" width="50%"/><br/>
<b>Фиг. 3</b> Създаване на хранилище в GitHub.

<p/>

При първоначалното конфигуриране на отдалеченото хранилище в GitHub се избира име на проекта, определя се съдържанието на .gitignore файла (в конкретния случай Android конфигурация) и се избира подходящ лиценз (в конкретния случай GPL3).

<p/>

<img src="0005.png" height="50%" width="50%"/><br/>
<b>Фиг. 4</b> Състояние на новосъздаденото хранилище в GitHub.

<p/>

При използването на езика за програмиране Java са възможни различни развойни инструменти. Един от най-популярните и най-широко използвани е Eclipse. Eclipse представлява интегрирана среда за разработка (IDE), която основно включва текстов редактор и механизъм за извикване на развойните инструменти, предоставени от компанията Oracle. За нуждите на Android програмирането, Eclipse поддържа допълнителна приставка наречена Android Developer Tools – Plugin. За разработка на Android приложения, Eclipse се използва в комбинация с Android Software Development Kit, който включва и емулатор на различни виртуални устройства. 

<p/>

<img src="0007.png" height="50%" width="50%"/><br/>
<b>Фиг. 5</b> Начален работен екран в Eclipse.

<p/>

Eclipse е развойна среда, която организира работата на проектен принцип. За тази цел всяка разработка се оформя като Eclipse Project.

<p/>

<img src="0008.png" height="50%" width="50%"/><br/>
<b>Фиг. 6</b> Създаване на нов Eclipse проект.

<p/>

Развойната среда позволява работата с множество различни проекти, но в случая на Android разработка най-удачният вариант е генерирането на Android Application Project. 

<p/>

<img src="0009.png" height="50%" width="50%"/><br/>
<b>Фиг. 7</b> Основни параметри на новосъздадения Eclipse проект.

<p/>

В работното пространство на Eclipse всеки проект има уникално наименование. Също така, всеки проект представлява софтуерен продукт и поради тази причина се въвежда наименование на продукта. В езика Java софтуерът се организира под формата на пакети и поради тази причина е необходимо избирането на подходящо название за пакет. Названието на пакета трябва да е уникално и да не води до колизия с наименованията на други пакети, дори когато става въпрос за софтуери с глобален мащаб на разпространение. Названието на пакета има и друга ключова отговорност, а именно уникалност при публикуването на готовия продукт в Google Play Store. Точно на тази фаза от разработката се определят и Android версиите, които ще бъдат поддържани.

<p/>

<img src="0013.png" height="50%" width="50%"/><br/>
<b>Фиг. 8</b> Структура на новосъздадено проект в Eclipse.

<p/>

Като икона за предложението се запазват подразбиращите се характеристики и в етапа за създаване на проект не се добавя първоначален прозорец (Activity).

<p/>

За да бъде добавен новосъздадения Eclipse проект в отдалеченото хранилище на GitHub е необходимо клониране на отдалеченото хранилище в директория на локалния компютър.

<p/>

<img src="0015.png" height="50%" width="50%"/><br/>
<b>Фиг. 9</b> Команда за клониране от отдалеченото хранилище на GitHub.

<p/>

В резултат от командата за клониране на работният плот се появява папка с локално копие на GitHub хранилището. 

<p/>

<img src="0016.png" height="50%" width="50%"/><br/>
<b>Фиг. 10</b> Резултат от командата за клониране.

<p/>

Файловете от двете папки (папката създадена от Eclipse и папката получена в следствие на процеса за клониране) се обединяват в една обща папка.

<p/>

<img src="0018.png" height="50%" width="50%"/><br/>
<b>Фиг. 11</b> Обединяване на файловете за проекта.

<p/>

След обединяването на двете папки не е нужно повече да се използват командните инструменти на Git, а може да се използват вградените Git инструменти в средата Eclipse. 

<p/>

<img src="0021.png" height="50%" width="50%"/><br/>
<b>Фиг. 12</b> Публикуване на промените в локалното Git хранилище.

<p/>

Git е система за контрол на версиите, която работи на две степени (локално и глобално хранилище). Локалното хранилище се ползва при липса на връзка към Глобалната мрежа, докато публикуването в глобалното хранилище прави файловете публично достъпни в Глобалната мрежа.

<p/>

<img src="0022.png" height="50%" width="50%"/><br/>
<b>Фиг. 13</b> Публикуване на промените в глобалното Git хранилище.

<p/>

Започването на нов проект с отворен код приключва с публикуването на първоначалната версия в публичното пространство.

<p/>

<img src="0023.png" height="50%" width="50%"/><br/>
<b>Фиг. 14</b> Първоначален изглед на новосъздадения Eclipse проект в GitHub.

<hr/>
<h1>
4. Генериране на печалба от проекти с отворен код
</h1>

Софтуерът, като продукт, дава множество възможности за извършването на търговска дейност. Класическият вариант е свързан с продажба на лицензи за употребата на конкретен софтуер. Съществено е да се отбележи, че обект на търговската сделка е лицензът (правото за ползване), а не самият софтуер. Тъй като по своята природа, софтуерът е малко по-различен продукт, от класически продаваните продукти, то той позволява и серия друг модели за генериране на финансови приходи. Един значителен дял от софтуерните продукти се разпространяват под свободен лиценз, което изключва заплащането, от страна на потребителя, за това че ползва софтуера. При продуктите с отворен код е заложена дълбока философия за това, че достъпа до знание, в съвременния свят, трябва да бъде безплатен. Въпреки това, създателите на софтуер с отворен код е необходимо да генерират по някакъв начин финансови приходи, защото в противен случай не биха могли да поддържат дейността по създаването и поддръжката на софтуера. Най-често срещания модел за генериране на приходи е на база дарения. Зад едни от най-мащабните софтуерни проекти с отворен код често стоят нетърговски организации, даренията към които позволяват дейността да бъде финансирана. Вторият много популярен модел е предлагането на поддръжка в замяна на абонамент. При този модел целта на производителите е да създадат софтуерен продукт, толкова масово наложен и решават определени бизнес потребности, че потребителите да са склонни, да си заплащат услугите по поддръжката. В света на мобилните приложения и двата модела са трудно постижими, особено, когато става дума за малък проект, с малък търговски потенциал. Точно в тази ситуация най-подходящ е се оказва третият модел, който залага на реклами, визуализирани пред потребителите. Приходи от реклама биха били най-подходящи за продукта, който е представен в тази разработка. 

<p/>

Съществуват различни възможности за вграждане на рекламни материали в мобилните приложения, под формата на външни услуги. При тези външни услуги производителят на софтуера добавя конкретен модул в приложението си, който осъществява интеграцията със системата за обмен на реклами. Негативният ефект при този вариант е, че производителят става зависим от доставчика на услугата за обмен на реклами. Поради тази причина много по-удачен вариант е използването на собствена система за обмен на визуални реклами.


<p/>

<img src="0025.png" height="50%" width="50%"/><br/>
<b>Фиг. 15</b> Revive Ad Server система за обмен на реклами.

<p/>

Една от най-разпространените платформи за обмен на реклами е Revive Ad Server. Представлява PHP/MySQL сървър скрипт приложение, което се разпространява под свободен лиценз и може да се използва без да се заплаща.  Revive Ad Server е предназначен за визуализация на реклами в уеб страници. Съществува и приложение за доставка на реклами в мобилни приложения, но то се разпространява срещу лицензна такса и не би било икономически изгодно при разработването на платформа от софтуер с отворен код. За нуждите на настоящата разработка ще бъдат използвани възможностите на Android платформата за визуализация на цялостни уеб страници.

<p/>

<img src="0027.png" height="50%" width="50%"/><br/>
<b>Фиг. 16</b> Revive Ad Server организация на уеб сайтове.

<p/>

Организацията на рекламния сървър е основана на поддръжката, на множество уеб сайтове. В случая на мобилните приложения, за всяко мобилно приложение съществува профил в рекламния сървър. 

<p/>

<img src="0029.png" height="50%" width="50%"/><br/>
<b>Фиг. 17</b> Revive Ad Server профил на мобилното приложение Ithaka.

<p/>

В профила за мобилното приложение се въвежда името (в случая Ithaka), лицето за контакти, което е отговорно за изпълнението на рекламни кампании в това приложение и URL адрес. При използването на безплатната версия, на  Revive Ad Server могат да се обработват само уеб сайтове, които от своя страна се характеризират с URL адрес. Тъй като мобилните приложения не притежават URL адрес, а тази характеристика е задължителна, то най-логично е да се въведе URL адрес характеризиращ по някакъв начин мобилното приложение. Такъм URL адрес е точно адресът на който ще бъде публикувано приложението в Google Play Store. 

<p/>

<img src="0030.png" height="50%" width="50%"/><br/>
<b>Фиг. 18</b> Профил на мобилното приложение Ithaka, след създаванто му.

<p/>

Разделянето на уеб сайтове е на първично ниво в рамките на рекламния сървър. На вторично ниво всеки уеб сайт се характеризира с конкретни зони за визуализация на реклами. 

<p/>

<img src="0032.png" height="50%" width="50%"/><br/>
<b>Фиг. 19</b> Основна зона за реклама в стартовия прозорец на играта Ithaka.

<p/>

Различните уеб сайтове могат да имат различни петна в които да се показват изображенията на рекламата. Това важи и за мобилните приложения. В различни екрани на мобилното приложение могат да се показват различни по размер и вид рекламни изображения. 

<p/>

<img src="0033.png" height="50%" width="50%"/><br/>
<b>Фиг. 20</b> Единствена зона за реклами в играта Ithaka.

<p/>

В играта Ithaka ще има само една зона за реклама и това ще е първоначалният екран, при зареждане на приложението. Поради наличието на различни по размер и вид екрани на мобилни устройства един от най-удачните размери за реклами е 320х320 пискела. 

<p/>

<img src="0035.png" height="50%" width="50%"/><br/>
<b>Фиг. 21</b> Празна зона, без закачени рекламни банери.

<p/>

Към всяка обособена зона трябва да се асоциират определени визуални реклами (банери). 

<p/>

<img src="0036.png" height="50%" width="50%"/><br/>
<b>Фиг. 22</b> Множество от асоциирани банери.

<p/>

Чрез възможността към зоната да се асоциират конкретни банери се дава възможност за контрол на съдържанието и подбиране на тематична реклама, според вида на аудиторията, която използва конкретното приложение. 

<p/>

<img src="0039.png" height="50%" width="50%"/><br/>
<b>Фиг. 23</b> HTML код за вграждане в уеб страница.

<p/>

Конфигурирането на рекламния сървър завършва с генериране на HTML код, който трябва да се разположи в уеб страницата, която ще визуализира рекламата.

<p/>

<img src="0041.png" height="50%" width="50%"/><br/>
<b>Фиг. 24</b> Локална HTML страница в пакета на Android приложението.

<p/>

Android платформата позволява да се съхраняват локални ресурси (в това число и локални HTML страници) в специално предназначена за този случай директория – assets. За име на локалният файл е избрано banner.html.

<p/>

<img src="0044.png" height="50%" width="50%"/><br/>
<b>Фиг. 25</b> Програмен текст на локалната HTML страница.

<p/>

Съдържанието на локалната уеб страница е изключително тривиално и се състои от шаблон на HTML5 документ в тялото на който е разположен генерираният от Revive Ad Server програмен код.

<p/>

<img src="0046.png" height="50%" width="50%"/><br/>
<b>Фиг. 26</b> Създаване на начален екран за визуализиране на рекламни изображения.

<p/>

Android приложенията са организирани на работни екрани наречени Activity. Идеологията е такава, че всеки работен екран може да се активира по всяко време, без да се използва една единствена точка за стартиране (single entry point). Операционната система активира избран прозорец при начално стартиране, като тази задача се изпълнява от процес наречен Launcher. 

<p/>

<img src="0047.png" height="50%" width="50%"/><br/>
<b>Фиг. 27</b> Задаване на празен екран.

<p/>

Най-подходящия шаблон, от списъка с възможни екрани, е празният. В този празен екран ще бъде поместен само един визуален компонент, изпълняващ ролата на уеб браузър.

<p/>

<img src="0048.png" height="50%" width="50%"/><br/>
<b>Фиг. 28</b> Маркиране на прозореца като стартов.

<p/>

Всяко Activity в Android се описва от файл за графичния интерфейс (XML формат) и Java файл с програмен код. 

<p/>

<img src="0051.png" height="50%" width="50%"/><br/>
<b>Фиг. 29</b> Вграждане на уеб браузър компонент в началния прозорец.

<p/>

WebView е стандартен визуален компонент от палитрата с компоненти за изграждането на графичен потребителски интерфейс в Android. 

<p/>

<img src="0055.png" height="50%" width="50%"/><br/>
<b>Фиг. 30</b> Връзка за програмно управление на вградения браузър.

<p/>

За да се използва уеб браузър компонента в програмния файл на Java е необходимо да се получи референция към обекта, който операционната система ще създаде, в процеса на стартиране, на приложението. Още при зареждането се указва използване на JavaScript, тъй като рекламното съдържание се изтегля от сървъра с помощта на JavaScript код. Също така се подава и URL адресът на локално съхранената уеб страница. 

<p/>

<img src="0058.png" height="50%" width="50%"/><br/>
<b>Фиг. 31</b> Времетраене на визуализацията.

<p/>

Екранът, показващ рекламните изображения, получава две характеристики от външната среда (в случая, манифест файла). Първата характеристика определя колко милисекунди да се визуализира рекламата, а втората характеристика определя кой екран да бъде визуализиран в последствие. 

<p/>

<img src="0061.png" height="50%" width="50%"/><br/>
<b>Фиг. 32</b> Пренасочване към следващ прозорец.

<p/>

След изтичането на определеното време за визуализация се изпълнява код за пренасочване към основния екран на играта.

<p/>

<img src="0065.png" height="50%" width="50%"/><br/>
<b>Фиг. 33</b> Разрешение за използване на Интернет връзка.

<p/>

Моделът за сигурност на Android изисква потребителят да се съгласи с всички правила за достъп до устройството, при първоначално инсталиране на приложението. За да се получават и визуализират рекламните изображения е необходимо приложението да използва Интернет свързаност. 

<p/>

<img src="0067.png" height="50%" width="50%"/><br/>
<b>Фиг. 34</b> Параметри при извикване на прозорец.

<p/>

Прозорците в Android могат да получават определени параметри (без да се налага прекомпилиране на Java кода), чрез въвеждане на параметрите в описателната част за прозореца, в манифест файла на приложението. 

<p/>

<img src="0069.png" height="50%" width="50%"/><br/>
<b>Фиг. 35</b> Поведение при затваряне на прозореца.

<p/>

Последната стъпка от създаването на рекламния прозорец е да се укаже, че той няма да попада в стека от активирани прозорци. Операционната система поддържа стек с всички активирани прозорци. Когато потребителят се връща (често има хардуерен бутон за връщане назад) предходните прозорци се вадят от стека. Целта при показването на реклами в настоящия проект е реклата да се визуализира само един път и да не се активира, когато потребителя прелиства прозорците назад. 

<hr/>
<h1>
5. Визуализиране на помощна информация
</h1>



</body>
</html>

